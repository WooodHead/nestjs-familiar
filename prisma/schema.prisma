generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["interactiveTransactions"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Color {
    WHITE
    BLACK
    BLUE
    RED
    GREEN
}

enum Archetype {
    AGGRO
    MIDRANGE
    CONTROL
    COMBO
}

enum EventType {
    RANKED
    UNRANKED
}

enum EventStatus {
    SCHEDULED
    CANCELLED
    IN_PROGRESS
    COMPLETED
    CLOSED
}

enum UserRole {
    ADMIN
    ORGANIZER
    PLAYER
}

enum AccountPemission {
    READ
    CREATE
    UPDATE
    DELETE
}

model User {
    id String @id @default(uuid())

    firstName String @db.VarChar(255)
    lastName  String @db.VarChar(255)
    username  String @unique @db.VarChar(255)

    account       Account?
    subscriptions Subscription[]
    results       Result[]
}

model Account {
    id String @id @default(uuid())

    userId       String   @unique
    password     String   @db.VarChar(255)
    role         UserRole
    refreshToken String?  @db.VarChar(255)

    permissions Permission[]

    User User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model Permission {
    id String @id @default(uuid())

    permissions AccountPemission[]
    accountId   String
    leagueId    String

    Account Account @relation(fields: [accountId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    League  League  @relation(fields: [leagueId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model Deck {
    id String @id @default(uuid())

    name      String    @unique @db.VarChar(255)
    archetype Archetype
    colors    Color[]

    results Result[]
}

model Result {
    id String @id @default(uuid())

    rank    Int    @db.Integer
    score   Int    @db.Integer
    eventId String
    userId  String
    deckId  String

    Event Event @relation(fields: [eventId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    User  User  @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    Deck  Deck  @relation(fields: [deckId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model Event {
    id String @id @default(uuid())

    name     String      @db.VarChar(255)
    type     EventType
    leagueId String
    seasonId String
    results  Result[]
    status   EventStatus

    League League @relation(fields: [leagueId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    Season Season @relation(fields: [seasonId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model Season {
    id String @id @default(uuid())

    name   String   @db.VarChar(255)
    endsAt DateTime @db.Date
    events Event[]
}

model League {
    id String @id @default(uuid())

    tag           String         @unique @db.VarChar(255)
    name          String         @db.VarChar(255)
    events        Event[]
    subscriptions Subscription[]

    Permission Permission[]
}

model Subscription {
    id String @id @default(uuid())

    userId   String
    leagueId String

    User   User   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    League League @relation(fields: [leagueId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}
